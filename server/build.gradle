plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'jacoco'
}

group = 'com.danram'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'  // Swagger-UI
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' //jpa
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}
test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
}

jacoco {
	toolVersion = '0.8.5'
}
tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
	jacoco.excludes = ['jdk.internal.*']
}

jacocoTestReport {
//    dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/config/*",
					"**/dto/*",
					"**/enums/*",
					"**/exception/*",
					"**/controller/*",
					"**/domain/*",
			])
		}))
	}

	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
